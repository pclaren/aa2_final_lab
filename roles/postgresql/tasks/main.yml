---
# tasks file for roles/postgres

- name: Load variable configuration
  include_tasks: variables.yml

  # Setup/install tasks.
- name: Load OS-specific tasks (RedHat)
  when: ansible_distribution == 'RedHat'
  include_tasks: setup-RedHat-{{ ansible_distribution_major_version }}.yml

- name: Check if PostgreSQL is initialized
  ansible.builtin.stat:
    path: '{{ postgresql_data_path }}/PG_VERSION'
    get_checksum: no
  register: pg_data_path

- name: Initialize PostgreSQL
  when: not pg_data_path.stat.exists
  ansible.builtin.command:
    cmd: '{{ postgresql_setup_cmd }} initdb'
  notify: restart_postgresql

- name: Setup PostgreSQL for remote password auth
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: '{{ postgresql_data_path }}/pg_hba.conf'
    owner: '{{ postgresql_user }}'
    group: '{{ postgresql_group }}'
    mode: 0600
  notify: restart_postgresql

- name: Setup PostgreSQL to listen on network interfaces
  ansible.builtin.lineinfile:
    path: '{{ postgresql_config_path }}/postgresql.conf'
    line: "listen_addresses = '*'"
    insertafter: '#listen_addresses'
  notify: restart_postgresql

- name: Ensure PostgreSQL is started and enabled on boot.
  ansible.builtin.systemd:
    name: '{{ postgresql_service }}'
    state: started
    enabled: yes

- name: Configure PostgreSQL resources, users, databases etc
  block:
    - name: Create PostgreSQL database(s)
      ansible.builtin.postgresql_db:
        name: '{{ __database.name }}'
        state: "{{ __database.state | default('present') }}"
      loop: '{{ postgresql_databases }}'
      loop_control:
        loop_var: __database

    - name: Create PostgreSQL user(s)
      ansible.builtin.postgresql_user:
        name: '{{ __user.name }}'
        password: '{{ __user.password | default(omit) }}'
        priv: '{{ __user.priv | default(omit) }}'
        db: '{{ __user.database | default(omit) }}'
        state: '{{ __user.state | default(omit) }}'
      loop: '{{ postgresql_users }}'
      loop_control:
        loop_var: __user
      no_log: true
  become: yes
  become_user: '{{ postgresql_user }}'
